import sqlite3
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.pdfgen import pdfgeom
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Image
import webbrowser

class Relatorios():
    def printCliente(self):
        webbrowser.open("cliente.pdf")

    def geraRelatorioCliente(self):
        self.c = canvas.Canvas("cliente.pdf")
        self.codigoRel = self.codigo_entry.get()
        self.nomeRel = self.nome_entry.get()
        self.telefoneRel = self.telefone_entry.get()
        self.cidadeRel = self.cidade_entry.get()
        self.c.setFont("Helvetica", 24)
        self.c.drawString(200, 790, "Ficha do Cliente")
        self.c.setFont("Helvetica", 14)
        self.c.drawString(50, 670, f"Código: {self.codigoRel}")
        self.c.drawString(50, 650, f"Nome: {self.nomeRel}")
        self.c.drawString(50, 630, f"Telefone: {self.telefoneRel}")
        self.c.drawString(50, 610, f"Cidade: {self.cidadeRel}")
        self.c.rect(20, 690, 550, 150, fill=False, stroke=True)
        self.c.showPage()
        self.c.save()

class Funcs():
    def limpa_tela(self):
        self.codigo_entry.delete(0, END)
        self.nome_entry.delete(0, END)
        self.telefone_entry.delete(0, END)
        self.cidade_entry.delete(0, END)

    def conecta_bd(self):
        self.conn = sqlite3.connect("Clientes.bd")
        self.cursor = self.conn.cursor()
        print("Conectando ao banco de dados")

    def desconecta_bd(self):
        self.conn.close()
        print("Banco de dados desconectado")

    def monta_tabelas(self):
        self.conecta_bd()
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS clientes(
            cod INTEGER PRIMARY KEY AUTOINCREMENT,
            nome_cliente CHAR(40) NOT NULL,
            telefone INTEGER(20),
            cidade CHAR(40));""")
        self.conn.commit()
        self.desconecta_bd()
    def variaveis(self):
        self.codigo = self.codigo_entry.get()
        self.nome = self.nome_entry.get()
        self.telefone = self.telefone_entry.get()
        self.cidade = self.cidade_entry.get()

    def add_cliente(self):
        self.variaveis()
        self.conecta_bd()

        try:
            self.cursor.execute(""" 
                INSERT INTO clientes (nome_cliente, telefone, cidade) 
                VALUES (?, ?, ?)
            """, (self.nome, self.telefone, self.cidade))
            self.conn.commit()
            print("Cliente inserido com sucesso!")
        except Exception as e:
            print(f"Erro ao inserir cliente: {e}")
        finally:
            self.desconecta_bd()
            self.select_lista()
            self.limpa_tela()

    def select_lista(self):
        self.listaCli.delete(*self.listaCli.get_children())
        self.conecta_bd()
        lista = self.cursor.execute("""
        SELECT cod, nome_cliente, telefone, cidade FROM clientes 
        ORDER BY nome_cliente ASC;  
        """)
        for i in lista:
            self.listaCli.insert("", END, values=i)
        self.desconecta_bd()

    def deleta_cliente(self):
        """Deleta o cliente selecionado pelo código"""
        self.variaveis()
        self.conecta_bd()
        try:
            self.cursor.execute("""
            DELETE FROM clientes WHERE cod = ?
            """, (self.codigo,))
            self.conn.commit()
            print(f"Cliente com código {self.codigo} deletado com sucesso!")
        except Exception as e:
            print(f"Erro ao deletar cliente: {e}")
        finally:
            self.desconecta_bd()
            self.select_lista()
            self.limpa_tela()

    def alterar_cliente(self):
        self.variaveis()
        self.conecta_bd()
        self.cursor.execute("""
        UPDATE clientes SET nome_cliente = ?, telefone = ?, cidade = ? WHERE cod = ?
        """, (self.nome, self.telefone, self.cidade, self.codigo))
        self.conn.commit()
        self.desconecta_bd()
        self.select_lista()
        self.limpa_tela()

    def buscar_cliente(self):
        """Realiza a busca de clientes pelo nome."""
        self.conecta_bd()
        self.listaCli.delete(*self.listaCli.get_children())
        nome_busca = self.nome_entry.get()
        try:
            lista = self.cursor.execute(
                """
                SELECT cod, nome_cliente, telefone, cidade 
                FROM clientes 
                WHERE nome_cliente LIKE ?
                """,
                (f'%{nome_busca}%',))
            for i in lista:
                self.listaCli.insert("", END, values=i)
        except Exception as e:
            print(f"Erro ao buscar cliente: {e}")
        finally:
            self.desconecta_bd()

class Application(Funcs, Relatorios):
    def __init__(self):
        self.root = tk.Tk()
        self.tela()
        self.frames_da_tela()
        self.lista_frame2()
        self.widgets_frame1()
        self.monta_tabelas()
        self.select_lista()
        self.alterar_cliente()
        self.menus()
        self.root.mainloop()

    def OnDoubleClick(self, event):
        """Captura os dados do cliente ao dar duplo clique no Treeview"""
        self.limpa_tela()
        try:
            item_selecionado = self.listaCli.selection()[0]
            valores = self.listaCli.item(item_selecionado, 'values')
            self.codigo_entry.insert(0, valores[0])
            self.nome_entry.insert(0, valores[1])
            self.telefone_entry.insert(0, valores[2])
            self.cidade_entry.insert(0, valores[3])
        except IndexError:
            print("Nenhum item selecionado")

    def tela(self):
        self.root.title("Catalogo")
        self.root.geometry("800x500")
        self.root.resizable(False,False)
        self.root.configure(background="#3e754c")
        self.root.maxsize(width=900, height=700)
        self.root.minsize(width=500, height=400)

    def menus(self):
        menubar = Menu(self.root)
        self.root.configure(menu=menubar)
        filemenu = Menu(menubar)
        filemenu2 = Menu(menubar)

        def Quit():
            self.root.destroy()
            menubar.add_cascade(label="Opções", menu=filemenu)
            menubar.add_cascade(label="Relatório", menu=filemenu2)
            filemenu.add_command(label="Sair", command=Quit)
            filemenu2.add_command(label="Ficha do Cliente", command=self.geraRelatorioCliente)
            filemenu.add_command(label="About", )

    def frames_da_tela(self):
        self.frame_1 = Frame(self.root, bd=4, bg="white", highlightbackground="#32d990", highlightthickness=3)
        self.frame_1.place(relx=0.02, rely=0.02, relwidth=0.96, relheight=0.46)
        self.frame_2 = Frame(self.root, bd=4, bg="white", highlightbackground="#32d990", highlightthickness=3)
        self.frame_2.place(relx=0.02, rely=0.5, relwidth=0.96, relheight=0.46)

    def widgets_frame1(self):
        self.bt_limpar = Button(self.frame_1, text='Limpar', bd=3, bg="#4f858f", fg="white", font="Arial 10 bold",
                                command=self.limpa_tela)
        self.bt_limpar.place(relx=0.2, rely=0.1, relwidth=0.1, relheight=0.12, )
        self.bt_buscar = Button(self.frame_1, text='Buscar', bd=3, bg="#4f858f", fg="white", font="Arial 10 bold",
                                command=self.buscar_cliente)
        self.bt_buscar.place(relx=0.31, rely=0.1, relwidth=0.1, relheight=0.12)
        self.bt_novo = Button(self.frame_1, text='Novo', bd=3, bg="#4f858f", fg="white", font="Arial 10 bold",
                              command=self.add_cliente)
        self.bt_novo.place(relx=0.58, rely=0.1, relwidth=0.1, relheight=0.12)
        self.bt_alterar = Button(self.frame_1, text='Alterar', bd=3, bg="#4f858f", fg="white", font="Arial 10 bold",
                                 command=self.alterar_cliente)
        self.bt_alterar.place(relx=0.69, rely=0.1, relwidth=0.1, relheight=0.12)
        self.bt_apagar = Button(self.frame_1, text='Apagar', bd=3, bg="#4f858f", fg="white", font="Arial 10 bold",
                                command=self.deleta_cliente)
        self.bt_apagar.place(relx=0.8, rely=0.1, relwidth=0.1, relheight=0.12)
        self.lb_codigo = Label(self.frame_1, text="Código: ", bg="white", fg="#4f858f", font="Arial 10 bold")
        self.lb_codigo.place(relx=0.05, rely=0.05)
        self.codigo_entry = Entry(self.frame_1)
        self.codigo_entry.place(relx=0.05, rely=0.20, relwidth=0.08)
        self.lb_nome = Label(self.frame_1, text="Nome: ", bg="white", fg="#4f858f", font="Arial 10 bold")
        self.lb_nome.place(relx=0.05, rely=0.30)
        self.nome_entry = Entry(self.frame_1)
        self.nome_entry.place(relx=0.05, rely=0.42, relwidth=0.3)
        self.lb_telefone = Label(self.frame_1, text="Telefone: ", bg="white", fg="#4f858f", font="Arial 10 bold")
        self.lb_telefone.place(relx=0.05, rely=0.53)
        self.telefone_entry = Entry(self.frame_1)
        self.telefone_entry.place(relx=0.05, rely=0.65, relwidth=0.3)
        self.lb_cidade = Label(self.frame_1, text="Cidade: ", bg="white", fg="#4f858f", font="Arial 10 bold")
        self.lb_cidade.place(relx=0.5, rely=0.53)
        self.cidade_entry = Entry(self.frame_1)
        self.cidade_entry.place(relx=0.5, rely=0.65, relwidth=0.3)

    def lista_frame2(self):
        self.listaCli = ttk.Treeview(self.frame_2, height=3, columns=("col1", "col2", "col3", "col4"))
        self.listaCli.heading("#0", text="")
        self.listaCli.heading("#1", text="Código")
        self.listaCli.heading("#2", text="Nome")
        self.listaCli.heading("#3", text="Telefone")
        self.listaCli.heading("#4", text="Cidade")
        self.listaCli.column("#0", width=1)
        self.listaCli.column("#1", width=50)
        self.listaCli.column("#2", width=200)
        self.listaCli.column("#3", width=125)
        self.listaCli.column("#4", width=125)
        self.listaCli.place(relx=0.01, rely=0.08, relwidth=0.95, relheight=0.85)
        self.scroolLista = Scrollbar(self.frame_2, orient='vertical')
        self.listaCli.configure(yscroll=self.scroolLista.set)
        self.scroolLista.place(relx=0.96, rely=0.08, relwidth=0.03, relheight=0.85)

        self.listaCli.bind("<Double-1>", self.OnDoubleClick)


Application()
